# load packages
import numpy
import pandas
import scipy.integrate as spint
from plotnine import *

# custom function
# ddSim
# define init val(N), time steps, param (K) K=100
# list of r-vals
    # rs[0] rs[1] ... rs[4]
# make DF store results
# for loop
def ddSim(y,t,r,K):
    N=y[0]
    dydt=r*N*(1-(N/K))
    return dydt
NO=[10]
times=range(0,600)
K=100
rs=[-0.1,0.1,0.4,0.8,1]
Q1A=pandas.DataFrame({"time":times,"r1":0,"r2":0,"r3":0,"r4":0,"r5":0})
for i in range(0,len(rs)):
    params=(rs[i],K)
    sim=spint.odeint(func=ddSim,y0=NO,t=times,args=params)
    Q1A.iloc[:,i]=sim[:,0]
ggplot(Q1A,aes(x='time',y='r1'))+geom_line()+theme_classic()+geom_line(aes(y='r2'),color='red')+geom_line(aes(y='r3'),color='green')+geom_line(aes(y='r4'),color='purple')+geom_line(aes(y='r5'),color='yellow')

NO=[1]
times=range(0,600)
K=[10,50,100]
rs=0.1
Q1B=pandas.DataFrame({"time":times,"K1":0,"K2":0,"K3":0})
for i in range(0,len(K)):
    params=(rs,K[i])
    sim=spint.odeint(func=ddSim,y0=NO,t=times,args=params)
    Q1B.iloc[:,i]=sim[:,0]
ggplot(Q1B,aes(x='time',y='K1'))+geom_line()+theme_classic()+geom_line(aes(y='K2'),color='red')+geom_line(aes(y='K3'),color='green')

NO=[1,50,100]
times=range(0,600)
K=50
rs=0.1
Q1C=pandas.DataFrame({"time":times,"r1":0,"r2":0,"r3":0})
for i in range(0,len(NO)):
    params=(rs,K)
    sim=spint.odeint(func=ddSim,y0=NO[i],t=times,args=params)
    Q1C.iloc[:,i]=sim[:,0]
ggplot(Q1C,aes(x='time',y='r1'))+geom_line()+theme_classic()+geom_line(aes(y='r2'),color='red')+geom_line(aes(y='r3'),color='green')


